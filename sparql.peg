Functions = head:Expression tail:(_ expr:Expression)* _ {
      let result = [].concat(head);
      tail.forEach(elem => {
        result.push(elem[1])
      });
      return result; }

Expression
  = output:Word _ fn:Word _ tail:Factor {
      return {function: fn, parameters: tail, output}
    }

ComplexParameter
  = param:Parameter arr:(_ "..." _ Parameter)? {
  	  let result = {
        type: param.type,
        argument: param.argument,
        required: param.required,
        array: false
      };
  	  if (arr) {
        result.argument = result.argument.slice(0, -1);
        result.array = true;
      }
      return result;
  }

Parameter
  = opt:("optional" _)? type:Word _ argument:Word { return {type, argument, required: opt ? false : true} }

Factor
  = "(" _ head:ComplexParameter tail:(_ "," _ ComplexParameter)* _ ")" {
      let result = [].concat(head);
      tail.forEach(elem => {
        result.push(elem[3])
      });
      return result; }

Word "word"
  = [a-zA-Z0-9:]+ { return text() }

_ "whitespace"
  = [ \t\n\r]*

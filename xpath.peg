Functions = head:Expression tail:(_ expr:Expression)* _ {
      let result = [].concat(head);
      tail.forEach(elem => {
        result.push(elem[1])
      });
      return result; }

Expression
  = fn:Word _ tail:Factor _ "as" _ output:Word {
      return {function: fn, parameters: tail, output}
    }

Parameter
  = argument:Word _ "as" _ type:Word { return {type, argument} }

Factor
  = "(" _ head:(Parameter)? tail:(_ "," _ Parameter)* _ ")" {
      let result = [];
      if (head) {
       result = result.concat(head);
      }
      tail.forEach(elem => {
        result.push(elem[3])
      });
      return result; }

Word "word"
  = [a-zA-Z0-9:$?*-]+ { return text() }

_ "whitespace"
  = [ \t\n\r]*

